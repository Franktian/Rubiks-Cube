<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<META http-equiv="X-UA-Compatible" content="IE=8">
<TITLE>One Cube report</TITLE>
<META name="author" content="Frank Tian">
<STYLE type="text/css">

body {margin-top: 0px;margin-left: 0px;}

#page_1 {position:relative; overflow: hidden;margin: 155px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_1 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_1 #id_2 {border:none;margin: 119px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}

#page_1 #dimg1 {position:absolute;top:108px;left:0px;z-index:-1;width:556px;height:412px;}
#page_1 #dimg1 #img1 {width:556px;height:412px;}




#page_2 {position:relative; overflow: hidden;margin: 110px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_2 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_2 #id_2 {border:none;margin: 127px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}

#page_2 #dimg1 {position:absolute;top:397px;left:14px;z-index:-1;width:528px;height:231px;}
#page_2 #dimg1 #img1 {width:528px;height:231px;}




#page_3 {position:relative; overflow: hidden;margin: 107px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_3 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_3 #id_2 {border:none;margin: 56px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}

#page_3 #dimg1 {position:absolute;top:164px;left:0px;z-index:-1;width:556px;height:628px;}
#page_3 #dimg1 #img1 {width:556px;height:628px;}




#page_4 {position:relative; overflow: hidden;margin: 111px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_4 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_4 #id_2 {border:none;margin: 63px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}

#page_4 #dimg1 {position:absolute;top:79px;left:0px;z-index:-1;width:556px;height:702px;}
#page_4 #dimg1 #img1 {width:556px;height:702px;}




#page_5 {position:relative; overflow: hidden;margin: 118px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_5 #id_1 {border:none;margin: 4px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_5 #id_2 {border:none;margin: 61px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}

#page_5 #dimg1 {position:absolute;top:0px;left:0px;z-index:-1;width:556px;height:503px;}
#page_5 #dimg1 #img1 {width:556px;height:503px;}




#page_6 {position:relative; overflow: hidden;margin: 111px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_6 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_6 #id_2 {border:none;margin: 50px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}

#page_6 #dimg1 {position:absolute;top:432px;left:0px;z-index:-1;width:327px;height:343px;}
#page_6 #dimg1 #img1 {width:327px;height:343px;}




#page_7 {position:relative; overflow: hidden;margin: 111px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_7 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_7 #id_2 {border:none;margin: 356px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}

#page_7 #dimg1 {position:absolute;top:64px;left:194px;z-index:-1;width:97px;height:186px;}
#page_7 #dimg1 #img1 {width:97px;height:186px;}




#page_8 {position:relative; overflow: hidden;margin: 107px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_8 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_8 #id_2 {border:none;margin: 673px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}





#page_9 {position:relative; overflow: hidden;margin: 107px 0px 156px 119px;padding: 0px;border: none;width: 675px;}
#page_9 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 675px;overflow: hidden;}
#page_9 #id_2 {border:none;margin: 619px 0px 0px 549px;padding: 0px;border:none;width: 126px;overflow: hidden;}





.dclr {clear:both;float:none;height:1px;margin:0px;padding:0px;overflow:hidden;}

.ft0{font: 13px 'Arial';line-height: 16px;}
.ft1{font: 11px 'Arial';line-height: 14px;}
.ft2{font: 25px 'Arial';line-height: 28px;}
.ft3{font: 18px 'Arial';line-height: 21px;}
.ft4{font: 14px 'Arial';line-height: 16px;}
.ft5{font: italic 13px 'Arial';line-height: 18px;}
.ft6{font: 13px 'Arial';line-height: 18px;}
.ft7{font: 15px 'Arial';line-height: 17px;}
.ft8{font: 12px 'Arial';line-height: 15px;}
.ft9{font: 10px 'Arial';line-height: 14px;position: relative; bottom: 5px;}
.ft10{font: 13px 'Arial';line-height: 17px;}
.ft11{font: 10px 'Arial';line-height: 15px;position: relative; bottom: 5px;}
.ft12{font: 13px 'Arial';color: #009900;line-height: 16px;}
.ft13{font: 13px 'Arial';color: #0000ff;line-height: 16px;}
.ft14{font: 13px 'Arial';color: #009900;margin-left: 7px;line-height: 16px;}
.ft15{font: 13px 'Arial';color: #9400d1;line-height: 16px;}
.ft16{font: 13px 'Arial';margin-left: 7px;line-height: 16px;}
.ft17{font: bold 13px 'Arial';line-height: 16px;}
.ft18{font: 10px 'Arial';line-height: 13px;position: relative; bottom: 5px;}
.ft19{font: 15px 'Arial';margin-left: 8px;line-height: 17px;}
.ft20{font: 10px 'Arial';line-height: 13px;position: relative; bottom: 6px;}
.ft21{font: 9px 'Arial';line-height: 12px;position: relative; bottom: 4px;}
.ft22{font: 10px 'Arial';line-height: 13px;position: relative; bottom: 4px;}
.ft23{font: 13px 'Arial';line-height: 18px;position: relative; bottom: 10px;}
.ft24{font: 10px 'Arial';line-height: 15px;position: relative; bottom: 6px;}
.ft25{font: 10px 'Arial';line-height: 15px;position: relative; bottom: 4px;}
.ft26{font: 18px 'Arial';margin-left: 9px;line-height: 21px;}
.ft27{font: 13px 'Arial';margin-left: 75px;line-height: 18px;}
.ft28{font: 15px 'Arial';line-height: 19px;}
.ft29{font: 13px 'Arial';margin-left: 75px;line-height: 16px;}

.p0{text-align: left;padding-left: 87px;margin-top: 0px;margin-bottom: 0px;}
.p1{text-align: left;padding-left: 221px;margin-top: 39px;margin-bottom: 0px;}
.p2{text-align: left;padding-left: 221px;margin-top: 78px;margin-bottom: 0px;}
.p3{text-align: left;padding-left: 241px;margin-top: 4px;margin-bottom: 0px;}
.p4{text-align: left;padding-left: 211px;margin-top: 354px;margin-bottom: 0px;}
.p5{text-align: justify;padding-right: 117px;margin-top: 15px;margin-bottom: 0px;text-indent: 1px;}
.p6{text-align: left;margin-top: 0px;margin-bottom: 0px;}
.p7{text-align: left;padding-left: 165px;margin-top: 0px;margin-bottom: 0px;}
.p8{text-align: justify;padding-right: 117px;margin-top: 12px;margin-bottom: 0px;}
.p9{text-align: justify;padding-right: 119px;margin-top: 18px;margin-bottom: 0px;}
.p10{text-align: justify;padding-right: 119px;padding-top: 2px;margin-top: 20px;margin-bottom: 0px;}
.p11{text-align: justify;padding-right: 119px;margin-top: 19px;margin-bottom: 0px;}
.p12{text-align: justify;padding-right: 117px;margin-top: 260px;margin-bottom: 0px;}
.p13{text-align: left;padding-left: 195px;margin-top: 0px;margin-bottom: 0px;}
.p14{text-align: left;padding-right: 119px;margin-top: 16px;margin-bottom: 0px;}
.p15{text-align: left;padding-left: 203px;margin-top: 24px;margin-bottom: 0px;}
.p16{text-align: left;padding-right: 117px;margin-top: 12px;margin-bottom: 0px;}
.p17{text-align: left;margin-top: 15px;margin-bottom: 0px;}
.p18{text-align: left;margin-top: 16px;margin-bottom: 0px;}
.p19{text-align: left;padding-left: 50px;padding-right: 402px;margin-top: 0px;margin-bottom: 0px;}
.p20{text-align: left;padding-left: 50px;padding-right: 402px;margin-top: 16px;margin-bottom: 0px;}
.p21{text-align: justify;padding-left: 50px;margin-top: 15px;margin-bottom: 0px;}
.p22{text-align: justify;padding-left: 50px;margin-top: 0px;margin-bottom: 0px;}
.p23{text-align: justify;padding-left: 50px;margin-top: 16px;margin-bottom: 0px;}
.p24{text-align: left;padding-left: 50px;margin-top: 0px;margin-bottom: 0px;}
.p25{text-align: left;margin-top: 28px;margin-bottom: 0px;}
.p26{text-align: left;padding-left: 50px;padding-right: 492px;margin-top: 16px;margin-bottom: 0px;}
.p27{text-align: left;padding-left: 50px;margin-top: 16px;margin-bottom: 0px;}
.p28{text-align: justify;padding-right: 119px;margin-top: 0px;margin-bottom: 0px;text-indent: 1px;}
.p29{text-align: left;margin-top: 32px;margin-bottom: 0px;}
.p30{text-align: left;padding-left: 6px;padding-right: 313px;margin-top: 0px;margin-bottom: 0px;}
.p31{text-align: justify;padding-left: 50px;padding-right: 409px;margin-top: 0px;margin-bottom: 0px;}
.p32{text-align: left;padding-left: 100px;padding-right: 240px;margin-top: 0px;margin-bottom: 0px;}
.p33{text-align: left;padding-left: 50px;padding-right: 367px;margin-top: 0px;margin-bottom: 0px;}
.p34{text-align: left;padding-left: 162px;margin-top: 37px;margin-bottom: 0px;}
.p35{text-align: justify;padding-right: 119px;margin-top: 12px;margin-bottom: 0px;}
.p36{text-align: justify;padding-right: 117px;margin-top: 18px;margin-bottom: 0px;}
.p37{text-align: left;padding-left: 6px;margin-top: 12px;margin-bottom: 0px;}
.p38{text-align: left;padding-left: 77px;padding-right: 283px;margin-top: 16px;margin-bottom: 0px;text-indent: -26px;}
.p39{text-align: left;padding-left: 83px;padding-right: 270px;margin-top: 0px;margin-bottom: 0px;text-indent: -26px;}
.p40{text-align: left;padding-left: 83px;padding-right: 277px;margin-top: 0px;margin-bottom: 0px;text-indent: -26px;}
.p41{text-align: left;padding-left: 57px;margin-top: 0px;margin-bottom: 0px;}
.p42{text-align: left;padding-left: 50px;padding-right: 213px;margin-top: 0px;margin-bottom: 0px;}
.p43{text-align: left;padding-left: 100px;margin-top: 0px;margin-bottom: 0px;}
.p44{text-align: left;padding-left: 151px;padding-right: 252px;margin-top: 0px;margin-bottom: 0px;}
.p45{text-align: left;padding-left: 151px;padding-right: 266px;margin-top: 0px;margin-bottom: 0px;}
.p46{text-align: left;padding-left: 151px;margin-top: 0px;margin-bottom: 0px;}
.p47{text-align: left;padding-left: 151px;padding-right: 273px;margin-top: 0px;margin-bottom: 0px;}
.p48{text-align: left;padding-left: 151px;padding-right: 287px;margin-top: 0px;margin-bottom: 0px;}
.p49{text-align: left;padding-left: 195px;margin-top: 26px;margin-bottom: 0px;}
.p50{text-align: left;padding-left: 228px;margin-top: 15px;margin-bottom: 0px;}
.p51{text-align: left;margin-top: 12px;margin-bottom: 0px;}
.p52{text-align: justify;padding-left: 24px;margin-top: 14px;margin-bottom: 0px;}
.p53{text-align: justify;padding-left: 54px;margin-top: 8px;margin-bottom: 0px;}
.p54{text-align: justify;padding-left: 24px;margin-top: 0px;margin-bottom: 0px;}
.p55{text-align: justify;padding-left: 54px;margin-top: 6px;margin-bottom: 0px;}
.p56{text-align: justify;padding-left: 24px;margin-top: 15px;margin-bottom: 0px;}
.p57{text-align: justify;padding-left: 193px;margin-top: 22px;margin-bottom: 0px;}
.p58{text-align: justify;padding-left: 24px;margin-top: 12px;margin-bottom: 0px;}
.p59{text-align: justify;padding-left: 24px;margin-top: 13px;margin-bottom: 0px;}
.p60{text-align: left;padding-left: 152px;margin-top: 27px;margin-bottom: 0px;}
.p61{text-align: justify;padding-right: 119px;margin-top: 20px;margin-bottom: 0px;}
.p62{text-align: left;padding-left: 228px;margin-top: 8px;margin-bottom: 0px;}
.p63{text-align: left;padding-left: 271px;margin-top: 10px;margin-bottom: 0px;}
.p64{text-align: left;margin-top: 2px;margin-bottom: 0px;}
.p65{text-align: left;padding-left: 228px;margin-top: 17px;margin-bottom: 0px;}
.p66{text-align: justify;padding-right: 119px;margin-top: 13px;margin-bottom: 0px;}
.p67{text-align: justify;padding-right: 119px;padding-top: 2px;margin-top: 18px;margin-bottom: 0px;}
.p68{text-align: justify;padding-right: 119px;margin-top: 21px;margin-bottom: 0px;}
.p69{text-align: left;padding-left: 5px;margin-top: 12px;margin-bottom: 0px;}
.p70{text-align: left;padding-right: 118px;margin-top: 0px;margin-bottom: 0px;}
.p71{text-align: left;padding-left: 269px;margin-top: 15px;margin-bottom: 0px;}
.p72{text-align: left;padding-left: 265px;margin-top: 2px;margin-bottom: 0px;}
.p73{text-align: left;margin-top: 19px;margin-bottom: 0px;}
.p74{text-align: left;padding-left: 194px;padding-right: 313px;padding-top: 10px;margin-top: 12px;margin-bottom: 0px;text-indent: 18px;}
.p75{text-align: justify;padding-right: 119px;margin-top: 2px;margin-bottom: 0px;}
.p76{text-align: left;padding-left: 213px;margin-top: 27px;margin-bottom: 0px;}
.p77{text-align: justify;padding-right: 117px;margin-top: 16px;margin-bottom: 0px;}
.p78{text-align: justify;padding-left: 221px;margin-top: 0px;margin-bottom: 0px;}
.p79{text-align: justify;padding-left: 166px;margin-top: 18px;margin-bottom: 0px;}
.p80{text-align: left;padding-left: 176px;margin-top: 26px;margin-bottom: 0px;}
.p81{text-align: left;padding-left: 220px;margin-top: 0px;margin-bottom: 0px;}
.p82{text-align: left;padding-left: 228px;margin-top: 18px;margin-bottom: 0px;}
.p83{text-align: left;padding-left: 91px;padding-right: 201px;margin-top: 15px;margin-bottom: 0px;text-indent: -91px;}
.p84{text-align: left;padding-left: 91px;padding-right: 268px;margin-top: 11px;margin-bottom: 0px;text-indent: -91px;}
.p85{text-align: justify;padding-left: 91px;padding-right: 119px;margin-top: 12px;margin-bottom: 0px;text-indent: -91px;}
.p86{text-align: justify;padding-left: 91px;margin-top: 4px;margin-bottom: 0px;}




</STYLE>
</HEAD>

<BODY>
<DIV id="page_1">
<DIV id="dimg1">
<IMG src="report_onecube_images/report_onecube1x1.jpg" id="img1">
</DIV>


<DIV id="id_1">
<P class="p0 ft1"><SPAN class="ft0">U</SPAN>NIVERSITY OF <SPAN class="ft0">T</SPAN>ORONTO <SPAN class="ft0">D</SPAN>EPARTMENT OF <SPAN class="ft0">C</SPAN>OMPUTER <SPAN class="ft0">S</SPAN>CIENCE</P>
<P class="p1 ft2">One Cube</P>
<P class="p2 ft0">Yawen(Frank) Tian</P>
<P class="p3 ft0">April 8, 2014</P>
<P class="p4 ft4"><SPAN class="ft3">1. B</SPAN>ACKGROUND</P>
<P class="p5 ft6">Rubik’s Cube is a <NOBR>3-D</NOBR> combination puzzle invented in 1974 by Hungarian sculptor and pro- fessor of architecture <SPAN class="ft5">Er no Rubik</SPAN>. In a classic Rubik’s Cube, each of the six faces is covered by nine stickers, each of one of six solid colours. An internal pivot mechanism enables each face to turn independently, thus mixing up the colours. It is now widely considered to be the world’s <NOBR>best-selling</NOBR> toy.</P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">1</P>
</DIV>
</DIV>
<DIV id="page_2">
<DIV id="dimg1">
<IMG src="report_onecube_images/report_onecube2x1.jpg" id="img1">
</DIV>


<DIV id="id_1">
<P class="p7 ft8"><SPAN class="ft7">1.1. M</SPAN>OTIVATION OF THE PROJECT</P>
<P class="p8 ft6">Originally the project was intended to create a digital version of Rubik’s Cube in a 3D imple- mentation within mobile device(Android, iOS) in the sense that the existing apps are not real 3D but more 2.5D. Given the situation that the idea for mobile Rubik’s Cube existed and there are implementations published already. Professor Karan Singh gave me a new idea of creating a <NOBR>newly-deﬁned</NOBR> Rubik’s Cube. I named it One Cube.</P>
<P class="p9 ft10">The skeleton of One Cube is exactly the same as a standard 3 by 3 Rubik’s Cube with one core difference in the rotation: In a standard Rubik’s Cube, the elementary movement is a 90<SPAN class="ft9">± </SPAN>rotation in one of the faces. While the elementary move for One Cube is, bascally, a 30<SPAN class="ft9">± </SPAN>rotations in one of the rows.</P>
<P class="p10 ft6">Notice from here that I am using the term <SPAN class="ft5">ROW </SPAN>and 30<SPAN class="ft11">± </SPAN>compare to <SPAN class="ft5">F ACE </SPAN>and 90<SPAN class="ft11">± </SPAN>for Rubik’s Cube. This represents the core mechanical difference between One Cube and Rubik’s Cube. The rotation for One Cube is like rotation of the continuous track in a tank. For a single rotation, each of the twelve faces within the row being rotated get moved one unit position towards the direction of this rotation. For a complete cycle you need to perform twelve basic rotation to the rotating row.</P>
<P class="p11 ft0">The ﬁgure below shows three basic rotation of One Cube to simulate a basic rotation of Rubik’s Cube</P>
<P class="p12 ft10">Notice that the small squares in One Cube is generally more independent than Rubik’s Cube, in the sense that Rubik’s Cube is a combination of 26 small pieces while One Cube is a combi- nation of 54 squares. This also leads to the total permutations of One Cube dramatically larger than Rubik’s Cube, which I will go over in the later section.</P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">2</P>
</DIV>
</DIV>
<DIV id="page_3">
<DIV id="dimg1">
<IMG src="report_onecube_images/report_onecube3x1.jpg" id="img1">
</DIV>


<DIV id="id_1">
<P class="p13 ft4"><SPAN class="ft3">2. I</SPAN>MPLEMENTATION</P>
<P class="p14 ft0">The current version of the project is implemented for Android device. The part can be divided into two parts. The data structure and the <NOBR>front-end</NOBR> implementation.</P>
<P class="p15 ft8"><SPAN class="ft7">2.1. D</SPAN>ATA <SPAN class="ft7">S</SPAN>TRUCTURE</P>
<P class="p16 ft0">Given the behaviour of One Cube, I am using linked list as the idea achieve the desire outcome. The component of the whole cube breaks into two main areas: The cube and the face.</P>
<P class="p17 ft12">// Cube.java</P>
<P class="p18 ft13">public class <SPAN class="ft0">Cube {</SPAN></P>
<P class="p19 ft0"><SPAN class="ft13">public </SPAN>Face front1 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face back1 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face left1 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face right1 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face up1 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face down1 = <SPAN class="ft13">new </SPAN>Face();</P>
<P class="p20 ft0"><SPAN class="ft13">public </SPAN>Face front2 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face back2 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face left2 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face right2 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face up2 = <SPAN class="ft13">new </SPAN>Face(); <SPAN class="ft13">public </SPAN>Face down2 = <SPAN class="ft13">new </SPAN>Face();</P>
<P class="p21 ft12"><SPAN class="ft12">//</SPAN><SPAN class="ft14">More Face declaration</SPAN></P>
<P class="p22 ft0">...</P>
<P class="p23 ft12"><SPAN class="ft12">//</SPAN><SPAN class="ft14">Methods</SPAN></P>
<P class="p24 ft0">...</P>
<P class="p6 ft0">}</P>
<P class="p25 ft13">public class <SPAN class="ft0">Face {</SPAN></P>
<P class="p24 ft12"><SPAN class="ft13">private </SPAN><SPAN class="ft0">String color; </SPAN>// The color that this face currently holds</P>
<P class="p26 ft12">// Adjacent faces <SPAN class="ft13">private </SPAN><SPAN class="ft0">Face up; </SPAN><SPAN class="ft13">private </SPAN><SPAN class="ft0">Face down; </SPAN><SPAN class="ft13">private </SPAN><SPAN class="ft0">Face left; </SPAN><SPAN class="ft13">private </SPAN><SPAN class="ft0">Face right;</SPAN></P>
<P class="p27 ft12"><SPAN class="ft13">private </SPAN><SPAN class="ft0">String id; </SPAN>// Represent the absolute location of this face</P>
<P class="p27 ft12">// Methods</P>
<P class="p24 ft0">...</P>
<P class="p6 ft0">}</P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">3</P>
</DIV>
</DIV>
<DIV id="page_4">
<DIV id="dimg1">
<IMG src="report_onecube_images/report_onecube4x1.jpg" id="img1">
</DIV>


<DIV id="id_1">
<P class="p28 ft10">It is easy to see that there are 54 faces in total. Each face acts as node within the linked list. All of them are mutually connected with the four pointers up, down, left right. This kind of data structure enables me to perform the rotation from the code level in a very day and smooth way:</P>
<P class="p29 ft12">/**</P>
<P class="p30 ft12">* Perform a basic left rotation on the current face */</P>
<P class="p18 ft0"><SPAN class="ft13">public void </SPAN>rotateLeft () {</P>
<P class="p31 ft0">String temp = <SPAN class="ft13">this</SPAN>.getColor(); String originID = <SPAN class="ft13">this</SPAN>.getID(); Face3 current = <SPAN class="ft13">this</SPAN>;</P>
<P class="p24 ft13">do <SPAN class="ft0">{</SPAN></P>
<P class="p32 ft12">// Switch the colour on at a time <SPAN class="ft0">current.setColor(current.getRight().getColor()); current = current.getRight();</SPAN></P>
<P class="p33 ft0">} <SPAN class="ft13">while</SPAN>(current.getID() != originID); current.getLeft().setColor(temp);</P>
<P class="p6 ft0">}</P>
<P class="p34 ft8"><SPAN class="ft7">2.2. F</SPAN>RONT <SPAN class="ft7">E</SPAN>ND <SPAN class="ft7">I</SPAN>MPLEMENTATION</P>
<P class="p35 ft6">The front end implementation is achieved by Android and OpenGL. The most challenging but also the most interesting part is the implementation of the touch event. And this is also where I got most of my critiques from the professor. In order to create a better user experience. It is nice for the player to be able to rotate the cube continuously rather than a single move upon touch release.</P>
<P class="p36 ft6">Take the screen of a mobile device is <NOBR>2-dimensional</NOBR> into consideration, my solution to this is to break the cube view into 27 different touch areas. Within each area, if ever the touch event is detected, the original position is recorded. The move event is deﬁned as when the distance from the original position is equal or greater than 100 pixels. Once this event is triggered, the original position is reset to the current position, enabling the continuous movement behaviour. And the moving direction is controlled by both the horizontal and vertical distance.</P>
<P class="p37 ft0">Boundary left1 = <SPAN class="ft13">new </SPAN>Boundary(</P>
<P class="p38 ft0"><SPAN class="ft13">new </SPAN>Point((<SPAN class="ft13">double</SPAN>)60.0f/720*getWidth(), (500.0f - 3*d0)/1280*getHeight()), <SPAN class="ft12">//upLeft</SPAN></P>
<P class="p39 ft0"><SPAN class="ft13">new </SPAN>Point((<SPAN class="ft13">double</SPAN>)160.0f/720*getWidth(), (500.0f - 2*d0)/1280*getHeight()), <SPAN class="ft12">//upRight</SPAN></P>
<P class="p39 ft0"><SPAN class="ft13">new </SPAN>Point((<SPAN class="ft13">double</SPAN>)160.0f/720*getWidth(), (633.3f - 2*d0)/1280*getHeight()), <SPAN class="ft12">//bottomRight</SPAN></P>
<P class="p40 ft0"><SPAN class="ft13">new </SPAN>Point((<SPAN class="ft13">double</SPAN>)60.0f/720*getWidth(), (633.3f - 3*d0)/1280*getHeight()) <SPAN class="ft12">//botomLeft</SPAN></P>
<P class="p41 ft0">);</P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">4</P>
</DIV>
</DIV>
<DIV id="page_5">
<DIV id="dimg1">
<IMG src="report_onecube_images/report_onecube5x1.jpg" id="img1">
</DIV>


<DIV class="dclr"></DIV>
<DIV id="id_1">
<P class="p42 ft0">Point detect = <SPAN class="ft13">new </SPAN>Point((<SPAN class="ft13">double</SPAN>)originX, (<SPAN class="ft13">double</SPAN>)originY); <SPAN class="ft13">if </SPAN>(left1.contains(test)) {</P>
<P class="p43 ft12">//Rotate right</P>
<P class="p44 ft0"><SPAN class="ft13">if</SPAN>(dx &gt; 50 && dy &gt; <NOBR>-10</NOBR> && dy &lt; 100){ mRenderer.on_change_horizontal_cube3(); originX = e.getX();</P>
<P class="p45 ft0">originY = e.getY(); mRenderer.rotateRightCube3(<SPAN class="ft15">"right1"</SPAN>);</P>
<P class="p46 ft0">}</P>
<P class="p43 ft12">//Rotate left</P>
<P class="p44 ft0"><SPAN class="ft13">if</SPAN>(dx &lt; <NOBR>-50</NOBR> && dy &lt; 10 && dy &gt; <NOBR>-100){</NOBR> mRenderer.on_change_horizontal_cube3(); originX = e.getX();</P>
<P class="p47 ft0">originY = e.getY(); mRenderer.rotateLeftCube3(<SPAN class="ft15">"right1"</SPAN>);</P>
<P class="p46 ft0">}</P>
<P class="p46 ft12">//Rotate Up</P>
<P class="p45 ft0"><SPAN class="ft13">if</SPAN>(dy <NOBR>&lt;-50</NOBR> && dx &gt; <NOBR>-10</NOBR> && dx &lt; 50){ mRenderer.on_change_vertical_cube3(); originX = e.getX();</P>
<P class="p48 ft0">originY = e.getY(); mRenderer.rotateUpCube3(<SPAN class="ft15">"front1"</SPAN>);</P>
<P class="p46 ft0">}</P>
<P class="p46 ft12">//Rotate Down</P>
<P class="p45 ft0"><SPAN class="ft13">if</SPAN>(dy &gt; 50 && dx &lt; 20 && dx &gt; <NOBR>-20){</NOBR> mRenderer.on_change_vertical_cube3(); originX = e.getX();</P>
<P class="p47 ft0">originY = e.getY(); mRenderer.rotateDownCube3(<SPAN class="ft15">"front1"</SPAN>);</P>
<P class="p46 ft0">}</P>
<P class="p24 ft0">}</P>
<P class="p18 ft0">The structure of the code base is somewhat similar to the <NOBR>Model-View-Controller</NOBR> pattern.</P>
<P class="p49 ft4"><SPAN class="ft3">3. F</SPAN>UNCTIONALITIES</P>
<P class="p50 ft8"><SPAN class="ft7">3.1. A</SPAN>CHIEVED</P>
<P class="p51 ft0">The achieved functionalities as of now are listed as follows:</P>
<P class="p52 ft0"><SPAN class="ft0">•</SPAN><SPAN class="ft16">Working implementation for 2 by 2 and 3 by 3 One Cube version</SPAN></P>
<P class="p53 ft0"><SPAN class="ft17">–</SPAN><SPAN class="ft16">Colors</SPAN></P>
<P class="p53 ft0"><SPAN class="ft17">–</SPAN><SPAN class="ft16">Stroke</SPAN></P>
<P class="p53 ft0"><SPAN class="ft17">–</SPAN><SPAN class="ft16">Touch event</SPAN></P>
<P class="p52 ft0"><SPAN class="ft0">•</SPAN><SPAN class="ft16">Basic row rotation</SPAN></P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">5</P>
</DIV>
</DIV>
<DIV id="page_6">
<DIV id="dimg1">
<IMG src="report_onecube_images/report_onecube6x1.jpg" id="img1">
</DIV>


<DIV id="id_1">
<P class="p54 ft0"><SPAN class="ft0">•</SPAN><SPAN class="ft16">Change of view</SPAN></P>
<P class="p55 ft0"><SPAN class="ft17">–</SPAN><SPAN class="ft16">90</SPAN><SPAN class="ft18">± </SPAN>left rotation and right rotation</P>
<P class="p53 ft0"><SPAN class="ft17">–</SPAN><SPAN class="ft16">180</SPAN><SPAN class="ft18">± </SPAN>rotation to the other side of view</P>
<P class="p56 ft0"><SPAN class="ft0">•</SPAN><SPAN class="ft16">Step back, including the change of view</SPAN></P>
<P class="p57 ft8"><SPAN class="ft7">3.2.</SPAN><SPAN class="ft19">T</SPAN>O BE IMPLEMENTED</P>
<P class="p58 ft0"><SPAN class="ft0">•</SPAN><SPAN class="ft16">Timer</SPAN></P>
<P class="p59 ft0"><SPAN class="ft0">•</SPAN><SPAN class="ft16">Global step view (indicate how many steps has been performed)</SPAN></P>
<P class="p52 ft0"><SPAN class="ft0">•</SPAN><SPAN class="ft16">Randomizer</SPAN></P>
<P class="p59 ft0"><SPAN class="ft0">•</SPAN><SPAN class="ft16">rotating animation(Or 3D view)</SPAN></P>
<P class="p60 ft4"><SPAN class="ft3">4. M</SPAN>ATHEMATICAL <SPAN class="ft3">D</SPAN>ISCUSSION</P>
<P class="p17 ft0">In this section I will discuss my exploration of ﬁnding the permutations of One Cube.</P>
<P class="p61 ft6">As I have discussed in the midterm presentation. I started my exploration from the standard Rubik’s Cube and camp up with the formula for the total permutation(details can be found in the project webpage):</P>
<P class="p62 ft0">8! £3<SPAN class="ft18">8 </SPAN>£12! £2<SPAN class="ft18">12</SPAN></P>
<P class="p63 ft0">12</P>
<P class="p64 ft0">Or:</P>
<P class="p65 ft0">8! £3<SPAN class="ft20">7 </SPAN>£12! £2<SPAN class="ft20">10</SPAN></P>
<P class="p66 ft10">The approach to the above formula use the piece of the Rubik’s Cube as a unit. In terms of One Cube, the unit would then be each square in the cube.</P>
<P class="p67 ft6">Now consider any single square in the One Cube<SPAN class="ft11">1</SPAN>. It is not hard to ﬁnd the fact that, based on the deﬁnition of One Cube, this square can be placed in any 54 different locations within the cube by a sequence of valid movements. Similarly, all other 53 squares can also be placed in any 54 different locations by the same way.</P>
<P class="p11 ft10">The above discussion implies a classic permutation and combination problem. What is the total permutation if there are 54 different balls to be placed into 54 different box(each box contains exactly one ball)?</P>
<P class="p68 ft0">The answer to this question should be straight forward: 54!. However, the result is over counted a bit. In this answer, we are counting situations where the 9 red squares switched among</P>
<P class="p69 ft1"><SPAN class="ft21">1</SPAN>The formal deﬁnition in Group theory is yet to be determined. The discussion is a rough idea</P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">6</P>
</DIV>
</DIV>
<DIV id="page_7">
<DIV id="dimg1">
<IMG src="report_onecube_images/report_onecube7x1.jpg" id="img1">
</DIV>


<DIV id="id_1">
<P class="p70 ft0">themselves. And in fact they are exactly the same case. Therefore, we should divide by 9!, the number of ways the 9 squares can be interchanged, and repeat this for each of the six colours:</P>
<P class="p71 ft0">54!</P>
<P class="p72 ft0">(9!)<SPAN class="ft22">6</SPAN></P>
<P class="p66 ft6">However, we are still over counting. If we can get from one conﬁguration to another just by turning the cube, they aren’t really different, but we have counted them as different. In fact there are 24 different ways to turn the cube. If we randomly pick one of the six faces. We can get 4 different conﬁguration by 90<SPAN class="ft11">± </SPAN>rotation. And there are 6 faces in total so to sum up 24 is the result.</P>
<P class="p73 ft0">Consequently, the ﬁnal result of the total permutations of One Cube is:</P>
<P class="p74 ft6"><SPAN class="ft23">54! </SPAN>Æ 4.2123901 £10<SPAN class="ft24">36 </SPAN>24 £(9!)<SPAN class="ft25">6</SPAN></P>
<P class="p75 ft10">This number also represents the number of different cubes you could get by peeling off all the visible colored facelets of the cube (9 on each of the 6 faces), scrambling them, and sticking them all back on.</P>
<P class="p76 ft4"><SPAN class="ft3">5. C</SPAN>ONCLUSION</P>
<P class="p77 ft6">The current implementation for One Cube is indeed a version that contains the core function- alities. The player is able to view all six faces of the cube with just a ﬁnger swipe, as well as rotating the rows and columns smoothly. The obvious future improvement in user experience would deﬁnitely be creating suitable animations for One Cube instead of colour ﬂashing. Such work would require further commitment to advanced computer graphics and linear algebra skills.</P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">7</P>
</DIV>
</DIV>
<DIV id="page_8">


<DIV id="id_1">
<P class="p78 ft4"><SPAN class="ft3">6.</SPAN><SPAN class="ft26">A</SPAN>PPENDICE</P>
<P class="p79 ft4"><SPAN class="ft3">A. O</SPAN>NE <SPAN class="ft3">C</SPAN>UBE PROJECT PAGE</P>
<P class="p17 ft7"><NOBR>http://franktian.github.io/Rubiks-Cube/</NOBR></P>
<P class="p80 ft3">B. CSC490 C<SPAN class="ft4">OURSE PAGE</SPAN></P>
<P class="p17 ft7">http://www.dgp.toronto.edu/~karan/courses/csc490/winter_2014/</P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">8</P>
</DIV>
</DIV>
<DIV id="page_9">


<DIV id="id_1">
<P class="p81 ft4"><SPAN class="ft3">7. R</SPAN>EFERENCE</P>
<P class="p82 ft4"><SPAN class="ft3">R</SPAN>EFERENCES</P>
<P class="p83 ft6"><SPAN class="ft0">[1]</SPAN><SPAN class="ft27">Answer from Dr. Rick in the Math Forum, </SPAN><SPAN class="ft28">http://mathforum.org/library/drmath/view/54301.html</SPAN></P>
<P class="p84 ft6"><SPAN class="ft0">[2]</SPAN><SPAN class="ft27">Wikipedia, history of Rubik’s Cube, </SPAN><SPAN class="ft28">http://en.wikipedia.org/wiki/Rubik’s_Cube/</SPAN></P>
<P class="p85 ft0"><SPAN class="ft0">[3]</SPAN><SPAN class="ft29">StackOverﬂow, answer to "How to deﬁne if a determinate point is inside a region?",</SPAN></P>
<P class="p86 ft7">http://stackoverflow.com/questions/12083093/</P>
</DIV>
<DIV id="id_2">
<P class="p6 ft0">9</P>
</DIV>
</DIV>
</BODY>
</HTML>
